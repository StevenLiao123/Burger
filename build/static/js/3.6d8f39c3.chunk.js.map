{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","rules","isValid","trim","length","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.6d8f39c3.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__hIbIs\",\"Label\":\"Input_Label__3otW0\",\"InputElement\":\"Input_InputElement__1Yrg4\",\"Invalid\":\"Input_Invalid__3tYPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2l370\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2DZah\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = ( props ) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!!!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>Cancel</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>Continue</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary; ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            //number\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n        \n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n       \n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if ( this.props.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };   \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace( '/checkout/contact-data' );\n    }\n\n    render () {\n        let summary = <Redirect to=\"/\"/>\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\n    const mapStateToProps = state => {\n        return {\n            ings: state.burgerBuilder.ingredients,\n            purchased: state.order.purchased\n        }\n    };\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}