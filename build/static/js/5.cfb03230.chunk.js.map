{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","react_default","a","createElement","style","textTransform","display","margin","border","padding","key","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,gJCkCHC,EA/BD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,IAAI,SAAAC,GACrC,OAAOC,EAAAC,EAAAC,cAAA,QACHC,MAAO,CACCC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAERC,IAAKV,EAAGJ,MAAOI,EAAGJ,KARxB,KAQgCI,EAAGH,OARnC,OAWX,OACII,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAQtB,OACpBW,EAAAC,EAAAC,cAAA,yBAAiBL,GACjBG,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,qBAAaU,OAAOC,WAAYtB,EAAMuB,OAAQC,QAAS,uCCtBvEC,8LAGEC,KAAK1B,MAAM2B,cAAcD,KAAK1B,MAAM4B,MAAOF,KAAK1B,MAAM6B,yCAKtD,IAAIC,EAASrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,MASb,OARKL,KAAK1B,MAAMgC,UACZF,EAASJ,KAAK1B,MAAM8B,OAAOvB,IAAI,SAAAR,GAAK,OAChCU,EAAAC,EAAAC,cAACb,EAAD,CACIoB,IAAKnB,EAAMkC,GACXhC,YAAaF,EAAME,YACnBsB,MAAOxB,EAAMwB,WAIrBd,EAAAC,EAAAC,cAAA,WACKmB,UAnBII,aAwCNC,sBAfS,SAAAC,GACpB,MAAO,CACHN,OAAQM,EAAMrC,MAAM+B,OACpBE,QAASI,EAAMrC,MAAMiC,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,SAIA,SAAAS,GACvB,MAAO,CACHX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,OAI/DM,CAA6CK,YAAiBf,EAAQgB","file":"static/js/5.cfb03230.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__4_UQe\"};","import React from 'react';\n\nimport classes from './Order.module.css';\n\nconst order = (props) => {\n    const ingredients = [];\n\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {\n                name: ingredientName, \n                amount: props.ingredients[ingredientName]\n            }\n        );\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n        return <span \n            style={{\n                    textTransform: 'capitalize',\n                    display: 'inline-block',\n                    margin: '0 8px',\n                    border: '1px solid #ccc',\n                    padding: '5px'\n                }} \n                     key={ig.name}>{ig.name} ({ig.amount})</span>;\n    });\n\n    return (\n        <div className={classes.Order}>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>\n        </div>);\n};\n\nexport default order;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n\n\n    render () {\n        let orders = <Spinner />;\n        if (!this.props.loading) {\n            orders = this.props.orders.map(order => (\n                <Order \n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={order.price}/>\n                ))\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}